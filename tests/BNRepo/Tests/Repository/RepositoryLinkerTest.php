<?php
namespace BNRepo\Tests\Repository;

use BNRepo\Repository\Repository;
use BNRepo\Repository\RepositoryLinker;
use BNRepo\Repository\RepositoryManager;
use Symfony\Component\Yaml\Yaml;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-17 at 11:34:26.
 */
class RepositoryLinkerTest extends RepositoryTest {

	public $cfg_id = 'bnrepo-test-local';

	public $cfg_id2;

	public function __construct($name = NULL, array $data = array(), $dataName = '') {
		parent::__construct($name, $data, $dataName);
		// find another Repository to test with
		foreach (RepositoryManager::$config as $k => $v) {
			if ('bnrepo-test-local' != $k && strstr($k, '-test-') >= 0) {
				$this->cfg_id2 = $k;
				break;
			}
		}
	}


	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		parent::tearDown();
		$this->_tearDown($this->repo2());
	}

	protected function setUp() {
		if (empty($this->cfg_id2)) {
			$this->markTestSkipped('need local and another repo to test the RepositoryLinker');
			return false;
		}
		return parent::setUp();
	}


	/**
	 * builds an exmaple uri
	 * @param string $key
	 * @param null $repo
	 * @return string
	 */
	public function uri($key = 'src.txt', $repo = null) {
		return sprintf('bnrepo://%s/%s', $repo ? : $this->cfg_id, $key);
	}

	public function uri2($key = 'src.txt') {
		return $this->uri($key, $this->cfg_id2);
	}

	/**
	 * @return Repository
	 */
	protected function repo2() {
		return RepositoryManager::getRepository($this->cfg_id2);
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::copy
	 */
	public function testCopy() {
		$key = 'src.txt';
		$uri = $this->uri($key);
		$to = $this->uri2($key);
		$this->repo()->write($key, $this->test_content);

		$this->assertTrue(RepositoryLinker::getInstance()->has($uri), 'file exists');
		$this->assertFalse(RepositoryLinker::getInstance()->has($to), 'file not exists');

		// Copy
		$this->assertTrue(RepositoryLinker::getInstance()->copy($uri, $to), 'copy successfull');

		$this->assertTrue(RepositoryLinker::getInstance()->has($uri), 'file exists after copy SRC');
		$this->assertTrue(RepositoryLinker::getInstance()->has($to), 'file exists after copy TRG');
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::has
	 */
	public function testHas() {
		$key = 'src.txt';
		$uri = $this->uri($key);
		$this->assertFalse(RepositoryLinker::getInstance()->has($uri), 'file not exists');
		$this->repo()->write($key, $this->test_content);
		$this->assertTrue(RepositoryLinker::getInstance()->has($uri), 'file exists');
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::getRepositoryFromUri
	 */
	public function testUriParsingWithoutScheme() {
		$this->setExpectedException('\BNRepo\Repository\NoValidLinkerScheme');
		$uri = '/path/to/test';
		RepositoryLinker::getInstance()->has($uri);
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::getRepositoryFromUri
	 */
	public function testUriParsingWithWrongScheme() {
		$this->setExpectedException('\BNRepo\Repository\NoValidLinkerScheme');
		$uri = 'http://server/path/to/test';
		RepositoryLinker::getInstance()->has($uri);
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::move
	 */
	public function testMove() {
		$key = 'src.txt';
		$uri = $this->uri($key);
		$to = $this->uri2($key);
		$this->repo()->write($key, $this->test_content);

		$this->assertTrue(RepositoryLinker::getInstance()->has($uri), 'file exists');
		$this->assertFalse(RepositoryLinker::getInstance()->has($to), 'file not exists');

		// Move
		$this->assertTrue(RepositoryLinker::getInstance()->move($uri, $to), 'moved successfull');

		$this->assertFalse(RepositoryLinker::getInstance()->has($uri), 'file not exists after moved SRC');
		$this->assertTrue(RepositoryLinker::getInstance()->has($to), 'file exists after copy TRG');
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::get
	 */
	public function testGet() {
		$key = 'src.txt';
		$uri = $this->uri($key);
		$this->assertFalse(RepositoryLinker::getInstance()->has($uri), 'file not exists');
		$this->repo()->write($key, $this->test_content);

		$this->assertInstanceOf('\Gaufrette\File', RepositoryLinker::getInstance()->get($uri), 'file exists');
		$this->assertEquals('/'.$key, RepositoryLinker::getInstance()->get($uri)->getKey(), 'name matches');
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::delete
	 */
	public function testDelete() {
		$key = 'src.txt';
		$uri = $this->uri($key);
		$this->assertFalse(RepositoryLinker::getInstance()->has($uri), 'file not exists');
		$this->repo()->write($key, $this->test_content);
		$this->assertTrue(RepositoryLinker::getInstance()->has($uri), 'file exists');
		$this->assertTrue(RepositoryLinker::getInstance()->delete($uri), 'delete file');
		$this->assertFalse(RepositoryLinker::getInstance()->has($uri), 'file not exists after deleted');
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::keys
	 */
	public function testKeys() {
		// the validity of the error checks the repositoryTest semself
		$this->repo()->write('src.txt', $this->test_content);
		$this->assertTrue(is_array(RepositoryLinker::getInstance()->keys($this->uri())), 'call OK, value returned');
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::listKeys
	 */
	public function testListKeys() {
		// the validity of the error checks the repositoryTest semself
		$this->repo()->write('src.txt', $this->test_content);
		$this->assertTrue(is_array(RepositoryLinker::getInstance()->listKeys($this->uri())), 'call OK, value returned');
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::mtime
	 */
	public function testMtime() {
		// the validity of the error checks the repositoryTest semself
		$this->repo()->write('src.txt', $this->test_content);
		$this->assertTrue(is_numeric(RepositoryLinker::getInstance()->mtime($this->uri())), 'call OK, value returned');
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::checksum
	 */
	public function testChecksum() {
		// the validity of the error checks the repositoryTest semself
		$this->repo()->write('src.txt', $this->test_content);
		$this->assertNotEmpty(RepositoryLinker::getInstance()->checksum($this->uri()), 'call OK, value returned');
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::createStream
	 * @todo   Implement testCreateStream().
	 */
	public function testCreateStream() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::createFile
	 * @todo   Implement testCreateFile().
	 */
	public function testCreateFile() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::read
	 */
	public function testRead() {
		$key = 'src.txt';
		$uri = $this->uri($key);
		$this->assertFalse(RepositoryLinker::getInstance()->has($uri), 'file not exists');
		$this->repo()->write($key, $this->test_content);

		$this->assertEquals($this->test_content, RepositoryLinker::getInstance()->read($uri), 'content matches');
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::write
	 */
	public function testWrite() {
		$key = 'src.txt';
		$uri = $this->uri($key);
		$this->assertFalse(RepositoryLinker::getInstance()->has($uri), 'file not exists');

		$this->assertEquals(mb_strlen($this->test_content), RepositoryLinker::getInstance()->write($uri, $this->test_content), 'content writes');
		$this->assertTrue(RepositoryLinker::getInstance()->has($uri), 'file exists');
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::download
	 */
	public function testDownload() {
		$key = 'src.txt';
		$uri = $this->uri2($key);
		$this->assertFalse(RepositoryLinker::getInstance()->has($uri), 'file not exists');
		$this->repo2()->write($key, $this->test_content);

		$localFile = self::DIR.'localFile.txt';
		$this->assertTrue(RepositoryLinker::getInstance()->pull($uri, $localFile), 'download file');
		$this->assertEquals($this->test_content, file_get_contents($localFile), 'content matches');
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::upload
	 */
	public function testUpload() {
		$key = 'src.txt';
		$uri = $this->uri2($key);
		$this->assertFalse(RepositoryLinker::getInstance()->has($uri), 'file not exists');

		$localFile = self::DIR . 'localFile.txt';
		file_put_contents($localFile, $this->test_content);

		$this->assertTrue(RepositoryLinker::getInstance()->push($localFile, $uri), 'file upload');
		$this->assertTrue(RepositoryLinker::getInstance()->has($uri), 'file exists');
	}


	/**
	 * @covers BNRepo\Repository\RepositoryLinker::getUrl
	 */
	public function testGetUrl() {
		$this->markTestIncomplete('to implement');
	}

	/**
	 * @covers BNRepo\Repository\RepositoryLinker::downloadFile
	 */
	public function testDownloadFile() {
		$this->markTestIncomplete('to implement');
	}

}